
use std::str::FromStr;
use num_bigint::BigInt;
use parser::ast::*;
use parser::box_option;
use super::lexer::{Token, LexicalError, fold_doc_comments, CommentType};

grammar<'input>(input: &'input str);

pub SourceUnit: SourceUnit = {
    SourceUnitPart+ => SourceUnit(<>)
}

SourceUnitPart: SourceUnitPart = {
    ContractDefinition => SourceUnitPart::ContractDefinition(<>),
    PragmaDirective => SourceUnitPart::PragmaDirective(<>.0, <>.1),
    ImportDirective => SourceUnitPart::ImportDirective(<>),
    EnumDefinition => SourceUnitPart::EnumDefinition(<>),
    StructDefinition => SourceUnitPart::StructDefinition(<>),
}

ImportDirective: StringLiteral = {
    "import" <s:StringLiteral> ";" => s
}

PragmaDirective: (Identifier, StringLiteral) = {
    // The lexer does special parsing for String literal; it isn't really a string literal
    "pragma" <i:Identifier> <s:StringLiteral> ";" => (i, s)
}

DocComments: Vec<String> = {
    DocComment* => fold_doc_comments(<>)
}

Type: Type = {
    "bool" => Type::Bool,
    "address" => Type::Address,
    "address" "payable" => Type::AddressPayable,
    // payable is only used as a cast in solc
    "payable" => Type::Payable,
    "string" => Type::String,
    "bytes" => Type::DynamicBytes,
    Uint => Type::Uint(<>),
    Int => Type::Int(<>),
    Bytes => Type::Bytes(<>),
    <l:@L> "mapping" "(" <k:Precedence0> "=>" <v:Precedence0> ")" <r:@R> => {
        Type::Mapping(Loc(l, r), Box::new(k), Box::new(v))
    }
}

ArrayDimension: Option<Expression> = {
    "[" "]" => None,
    "[" <Expression> "]" => Some(<>)
}

StorageLocation: StorageLocation = {
    <l:@L> "memory" <r:@R> => StorageLocation::Memory(Loc(l, r)),
    <l:@L> "storage" <r:@R> => StorageLocation::Storage(Loc(l, r)),
    <l:@L> "calldata" <r:@R> => StorageLocation::Calldata(Loc(l, r)),
}

Identifier: Identifier = {
    <l:@L> <n:LexIdentifier> <r:@R> => Identifier{loc: Loc(l, r), name: n.to_string()}
}

VariableDeclaration: VariableDeclaration = {
    <ty:Precedence0> <storage:StorageLocation?> <name:Identifier> => VariableDeclaration {
        ty, storage, name
    },
}

StructDefinition: Box<StructDefinition> = {
    <doc:DocComments> "struct" <name:Identifier> "{" <fields:(<VariableDeclaration> ";")*> "}" => {
        Box::new(StructDefinition{doc, name, fields})
    }
}

ContractType: ContractType = {
    "contract" => ContractType::Contract,
    "interface" => ContractType::Interface,
    "library" => ContractType::Library,
}

ContractPart: ContractPart = {
    StructDefinition => ContractPart::StructDefinition(<>),
    EventDefinition => ContractPart::EventDefinition(<>),
    EnumDefinition => ContractPart::EnumDefinition(<>),
    ContractVariableDefinition => ContractPart::ContractVariableDefinition(<>),
    FunctionDefinition => ContractPart::FunctionDefinition(<>),
}

ContractDefinition: Box<ContractDefinition> = {
    <doc:DocComments> <l:@L> <ty:ContractType> <name:Identifier> "{" <parts:(<ContractPart>)+> "}" <r:@R> => {
        Box::new(ContractDefinition{doc, loc: Loc(l, r), ty, name, parts})
    }
}

EventParameter: EventParameter = {
    <ty:Precedence0> <i:"indexed"?> <name:Identifier?> => EventParameter{
        ty, indexed: i.is_some(), name
    }
}

EventDefinition: Box<EventDefinition> = {
    <doc:DocComments> "event" <name:Identifier> "(" <v:CommaOne<EventParameter>> ")" <a:"anonymous"?> ";" => {
        Box::new(EventDefinition{
            doc, name, fields: v, anonymous: a.is_some()
        })
    },
}

EnumDefinition: Box<EnumDefinition> = {
    <doc:DocComments> "enum" <name:Identifier> "{" <values:Comma<Identifier>> "}" => {
        Box::new(EnumDefinition{doc, name, values})
    }
}

ContractVariableDefinition: Box<ContractVariableDefinition> = {
    <doc:DocComments> <l:@L> <ty:Precedence0> <attrs:VariableAttribute*> <name:Identifier> <e:("=" <Expression>)?> <r:@R>";" => {
        Box::new(ContractVariableDefinition{
            doc, loc: Loc(l, r), ty, attrs, name, initializer: e,
        })
    }
}

Visibility: Visibility = {
    <l:@L> "public" <r:@R> => Visibility::Public(Loc(l, r)),
    <l:@L> "external" <r:@R> => Visibility::External(Loc(l, r)),
    <l:@L> "internal" <r:@R> => Visibility::Internal(Loc(l, r)),
    <l:@L> "private" <r:@R> => Visibility::Private(Loc(l, r)),
}

VariableAttribute: VariableAttribute = {
    Visibility => VariableAttribute::Visibility(<>),
    <l:@L> "constant" <r:@R> => VariableAttribute::Constant(Loc(l, r))
}

Expression: Expression = {
    Precedence15,
}

Precedence15: Expression = {
    <l:Precedence14> <a:@L> "=" <b:@R> <r:Precedence15> => Expression::Assign(Loc(a, b), Box::new(l), Box::new(r)),
    <l:Precedence14> <a:@L> "|=" <b:@R> <r:Precedence15> => Expression::AssignOr(Loc(a, b), Box::new(l), Box::new(r)),
    <l:Precedence14> <a:@L> "^=" <b:@R> <r:Precedence15> => Expression::AssignXor(Loc(a, b), Box::new(l), Box::new(r)),
    <l:Precedence14> <a:@L> "&=" <b:@R> <r:Precedence15> => Expression::AssignAnd(Loc(a, b), Box::new(l), Box::new(r)),
    <l:Precedence14> <a:@L> "<<=" <b:@R> <r:Precedence15> => Expression::AssignShiftLeft(Loc(a, b), Box::new(l), Box::new(r)),
    <l:Precedence14> <a:@L> ">>=" <b:@R> <r:Precedence15> => Expression::AssignShiftRight(Loc(a, b), Box::new(l), Box::new(r)),
    <l:Precedence14> <a:@L> "+=" <b:@R> <r:Precedence15> => Expression::AssignAdd(Loc(a, b), Box::new(l), Box::new(r)),
    <l:Precedence14> <a:@L> "-=" <b:@R> <r:Precedence15> => Expression::AssignSubtract(Loc(a, b), Box::new(l), Box::new(r)),
    <l:Precedence14> <a:@L> "*=" <b:@R> <r:Precedence15> => Expression::AssignMultiply(Loc(a, b), Box::new(l), Box::new(r)),
    <l:Precedence14> <a:@L> "/=" <b:@R> <r:Precedence15> => Expression::AssignDivide(Loc(a, b), Box::new(l), Box::new(r)),
    <l:Precedence14> <a:@L> "%=" <b:@R> <r:Precedence15> => Expression::AssignModulo(Loc(a, b), Box::new(l), Box::new(r)),
    Precedence14,
}

Precedence14: Expression = {
    <c:Precedence14> <a:@L> "?" <l:Precedence13> ":" <b:@R> <r:Precedence13> => Expression::Ternary(Loc(a, b), Box::new(c), Box::new(l), Box::new(r)),
    Precedence13,
}

Precedence13: Expression = {
    <l:Precedence13> <a:@L> "||" <b:@R> <r:Precedence12> => Expression::Or(Loc(a, b), Box::new(l), Box::new(r)),
    Precedence12,
}

Precedence12: Expression = {
    <l:Precedence12> <a:@L> "&&" <b:@R> <r:Precedence11> => Expression::And(Loc(a, b), Box::new(l), Box::new(r)),
    Precedence11,
}

Precedence11: Expression = {
    <l:Precedence11> <a:@L> "==" <b:@R> <r:Precedence10> => Expression::Equal(Loc(a, b), Box::new(l), Box::new(r)),
    <l:Precedence11> <a:@L> "!=" <b:@R> <r:Precedence10> => Expression::NotEqual(Loc(a, b), Box::new(l), Box::new(r)),
    Precedence10,
}

Precedence10: Expression = {
    <l:Precedence10> <a:@L> "<" <b:@R> <r:Precedence9> => Expression::Less(Loc(a, b), Box::new(l), Box::new(r)),
    <l:Precedence10> <a:@L> ">" <b:@R> <r:Precedence9> => Expression::More(Loc(a, b), Box::new(l), Box::new(r)),
    <l:Precedence10> <a:@L> "<=" <b:@R> <r:Precedence9> => Expression::LessEqual(Loc(a, b), Box::new(l), Box::new(r)),
    <l:Precedence10> <a:@L> ">=" <b:@R> <r:Precedence9> => Expression::MoreEqual(Loc(a, b), Box::new(l), Box::new(r)),
    Precedence9,
}

Precedence9: Expression = {
    <l:Precedence9> <a:@L> "|" <b:@R> <r:Precedence8> => Expression::BitwiseOr(Loc(a, b), Box::new(l), Box::new(r)),
    Precedence8,
}

Precedence8: Expression = {
    <l:Precedence8> <a:@L> "^" <b:@R> <r:Precedence7> => Expression::BitwiseXor(Loc(a, b), Box::new(l), Box::new(r)),
    Precedence7,
}

Precedence7: Expression = {
    <l:Precedence7> <a:@L> "&" <b:@R> <r:Precedence6> => Expression::BitwiseAnd(Loc(a, b), Box::new(l), Box::new(r)),
    Precedence6,
}

Precedence6: Expression = {
    <l:Precedence6> <a:@L> "<<" <b:@R> <r:Precedence5> => Expression::ShiftLeft(Loc(a, b), Box::new(l), Box::new(r)),
    <l:Precedence6> <a:@L> ">>" <b:@R> <r:Precedence5> => Expression::ShiftRight(Loc(a, b), Box::new(l), Box::new(r)),
    Precedence5,
}

Precedence5: Expression = {
    <l:Precedence5> <a:@L> "+" <b:@R> <r:Precedence4> => Expression::Add(Loc(a, b), Box::new(l), Box::new(r)),
    <l:Precedence5> <a:@L> "-" <b:@R> <r:Precedence4> => Expression::Subtract(Loc(a, b), Box::new(l), Box::new(r)),
    Precedence4,
}

Precedence4: Expression = {
    <l:Precedence4> <a:@L> "*" <b:@R> <r:Precedence3> => Expression::Multiply(Loc(a, b), Box::new(l), Box::new(r)),
    <l:Precedence4> <a:@L> "/" <b:@R> <r:Precedence3> => Expression::Divide(Loc(a, b), Box::new(l), Box::new(r)),
    <l:Precedence4> <a:@L> "%" <b:@R> <r:Precedence3> => Expression::Modulo(Loc(a, b), Box::new(l), Box::new(r)),
    Precedence3,
}

Precedence3: Expression = {
    <l:Precedence3> <a:@L> "**" <b:@R> <r:Precedence2> => Expression::Power(Loc(a, b), Box::new(l), Box::new(r)),
    Precedence2,
}

Precedence2: Expression = {
    <a:@L> "!" <b:@R> <e:Precedence2> => Expression::Not(Loc(a, b), Box::new(e)),
    <a:@L> "~" <b:@R> <e:Precedence2> => Expression::Complement(Loc(a, b), Box::new(e)),
    <a:@L> "delete" <b:@R> <e:Precedence2> => Expression::Delete(Loc(a, b), Box::new(e)),
    <a:@L> "++" <b:@R> <e:Precedence2> => Expression::PreIncrement(Loc(a, b), Box::new(e)),
    <a:@L> "--" <b:@R> <e:Precedence2> => Expression::PreDecrement(Loc(a, b), Box::new(e)),
    <a:@L> "+" <b:@R> <e:Precedence2> => Expression::UnaryPlus(Loc(a, b), Box::new(e)),
    <a:@L> "-" <b:@R> <e:Precedence2> => Expression::UnaryMinus(Loc(a, b), Box::new(e)),
    Precedence1,
}

NamedArgument: NamedArgument = {
    <name:Identifier> ":" <expr:Expression> => NamedArgument{ name, expr }
}

FunctionCall: Expression = {
    <a:@L> <i:Precedence0> "(" <v:Comma<Expression>> ")" <b:@R> => {
        Expression::FunctionCall(Loc(a, b), Box::new(i), v)
    },
    <a:@L> <i:Precedence0> "(" "{" <v:Comma<NamedArgument>> "}" ")" <b:@R> => {
        Expression::NamedFunctionCall(Loc(a, b), Box::new(i), v)
    },
}

Precedence1: Expression = {
    <a:@L> "new" <call:FunctionCall> <b:@R> => Expression::New(Loc(a, b), Box::new(call)),
    Precedence0
}

Precedence0: Expression = {
    <a:@L> <e:Precedence0> "++" <b:@R> => Expression::PostIncrement(Loc(a, b), Box::new(e)),
    <a:@L> <e:Precedence0> "--" <b:@R> => Expression::PostDecrement(Loc(a, b), Box::new(e)),
    <FunctionCall> => <>,
    <a:@L> <e:Precedence0> "[" <i:Expression?> "]" <b:@R> => Expression::ArraySubscript(Loc(a, b), Box::new(e), box_option(i)),
    <a:@L> <e:Precedence0> "." <i:Identifier> <b:@R> => Expression::MemberAccess(Loc(a, b), Box::new(e), i),
    <a:@L> "true" <b:@R> => Expression::BoolLiteral(Loc(a, b), true),
    <a:@L> "false" <b:@R> => Expression::BoolLiteral(Loc(a, b), false),
    <StringLiteral+> => Expression::StringLiteral(<>),
    <HexLiteral+> => Expression::HexLiteral(<>),
    <l:@L> <ty:Type> <r:@R> => Expression::Type(Loc(l, r), ty),
    <a:@L> "[" <v:CommaOne<Expression>> "]" <b:@R> => {
        Expression::ArrayLiteral(Loc(a, b), v)
    },
    <Identifier> => Expression::Variable(<>),
    <l:@L> <n:LexNumber> <r:@R> => {
        let s: String = n.chars().filter(|v| *v != '_').collect();

        Expression::NumberLiteral(Loc(l, r), BigInt::from_str(&s).unwrap())
    },
    <l:@L> <n:LexHexNumber> <r:@R> => {
        Expression::HexNumberLiteral(Loc(l, r), n.to_owned())
    },
    <l:@L> <a:ParameterList> <r:@R> => {
        if a.len() == 1 {
            if let Some(Parameter{ ty, storage: None, name: None }) = &a[0].1 {
                // this means "(" Expression ")"
                return ty.clone();
            }
        }

        Expression::List(Loc(l, r), a)
    }
}

StringLiteral: StringLiteral = {
    <l:@L> <s:LexStringLiteral> <r:@R> => {
        StringLiteral{ loc: Loc(l, r), string: s.to_string() }
    }
}

HexLiteral: HexLiteral = {
    <l:@L> <s:LexHexLiteral> <r:@R> => {
        let v = s.to_string();
        let hex_len = v.len() - 5;

        HexLiteral{ loc: Loc(l, r), hex: v.chars().skip(4).filter(|c| *c != '_' && *c != '"').collect() }
    }
}

// A parameter list is used for function arguments, returns, and destructuring statements.
// In destructuring statements, parameters can be optional. So, we make parameters optional
// and as an added bonus we can generate error messages about missing parameters/returns
// to functions
Parameter: Parameter = {
    <ty:Expression> <storage:StorageLocation?> <name:Identifier?> => {
        Parameter{ty, storage, name}
    }
}

OptParameter: (Loc, Option<Parameter>) = {
    <l:@L> <p:Parameter?> <r:@R> => (Loc(l, r), p),
}

ParameterList: Vec<(Loc, Option<Parameter>)> = {
    "(" ")" => Vec::new(),
    "(" <l:@L> <p:Parameter> <r:@R> ")" => vec!((Loc(l, r), Some(p))),
    "(" <CommaTwo<OptParameter>> ")" => <>,
}

StateMutability: StateMutability = {
    <l:@L> "pure" <r:@R> => StateMutability::Pure(Loc(l, r)),
    <l:@L> "view" <r:@R> => StateMutability::View(Loc(l, r)),
    <l:@L> "payable" <r:@R> => StateMutability::Payable(Loc(l, r)),
}

FunctionAttribute: FunctionAttribute = {
    StateMutability => FunctionAttribute::StateMutability(<>),
    Visibility => FunctionAttribute::Visibility(<>),
}

FunctionTy: FunctionTy = {
    "constructor" => FunctionTy::Constructor,
    "fallback" => FunctionTy::Fallback,
    "receive" => FunctionTy::Receive,
    "function" => FunctionTy::Function,
}

BlockStatementOrSemiColon: Statement = {
    ";" => Statement::Empty,
    BlockStatement => Statement::BlockStatement(<>),
}

FunctionDefinition: Box<FunctionDefinition> = {
    <doc:DocComments> <l:@L> <ty:FunctionTy> <nl:@L> <name:Identifier?> <nr:@R> <params:ParameterList>
    <attributes:FunctionAttribute*>
    <returns:("returns" <ParameterList>)?> <body:BlockStatementOrSemiColon> <r:@R> => {
        let returns = returns.unwrap_or(Vec::new());

        Box::new(FunctionDefinition{
            doc,
            loc: Loc(l, r),
            ty,
            name,
            name_loc: Loc(nl, nr),
            params,
            attributes,
            returns,
            body,
        })
    },
}

BlockStatement: BlockStatement = {
    "{" <s:Statement*> "}" => {
        BlockStatement(s)
    },
}

OpenStatement: Statement = {
    "if" "(" <cond:Expression> ")" <body:Statement> => {
        Statement::If(cond, Box::new(body), None)
    },
    "if" "(" <cond:Expression> ")" <body:ClosedStatement> "else" <o:OpenStatement> => {
        Statement::If(cond, Box::new(body), Some(Box::new(o)))
    },
    "while" "(" <e:Expression> ")" <b:OpenStatement> => {
        Statement::While(e, Box::new(b))
    }
}

ClosedStatement: Statement = {
    NonIfStatement,
    "if" "(" <cond:Expression> ")" <body:ClosedStatement> "else" <o:ClosedStatement> => {
        Statement::If(cond, Box::new(body), Some(Box::new(o)))
    },
    "while" "(" <e:Expression> ")" <b:ClosedStatement> => {
        Statement::While(e, Box::new(b))
    },
    "for" "(" <b:SimpleStatement?> ";" <c:Expression?> ";" <n:SimpleStatement?> ")" <block:ClosedStatement> => {
        Statement::For(box_option(b), box_option(c), box_option(n), Some(Box::new(block)))
    },
    "for" "(" <b:SimpleStatement?> ";" <c:Expression?> ";" <n:SimpleStatement?> ")" ";" => {
        Statement::For(box_option(b), box_option(c), box_option(n), None)
    }
}

Statement: Statement = {
    OpenStatement,
    ClosedStatement
}

SimpleStatement: Statement = {
    <v:VariableDeclaration> <e:("=" <Expression>)?> => {
        Statement::VariableDefinition(v, e)
    },
    <e:Expression> => {
        Statement::Expression(e)
    }
}

NonIfStatement: Statement = {
    BlockStatement => {
        Statement::BlockStatement(<>)
    },
    <b:SimpleStatement> ";" => b,
    "_" ";" => {
        Statement::PlaceHolder
    },
    "do" <b:Statement> "while" "(" <e:Expression> ")" ";" => {
        Statement::DoWhile(Box::new(b), e)
    },
    "continue" ";" => {
        Statement::Continue
    },
    "break" ";" => {
        Statement::Break
    },
    <l:@L> "return" <r:@R> ";" => {
        Statement::Return(Loc(l, r), None)
    },
    <l:@L> "return" <e:Expression> <r:@R> ";" => {
        Statement::Return(Loc(l, r), Some(e))
    },
    "try" <e:Expression> <r:("returns" <ParameterList>)?>
    <ok:BlockStatement>
    "catch" "(" <p:Parameter> ")" <b:BlockStatement> => {
        Statement::Try(e, r.unwrap_or(Vec::new()),
            Box::new(Statement::BlockStatement(ok)),
            None,
            Box::new((p, Statement::BlockStatement(b))))
    },
    "try" <e:Expression> <r:("returns" <ParameterList>)?>
    <ok:BlockStatement>
    "catch" <i:Identifier> "(" <pe:Parameter> ")" <be:BlockStatement>
    "catch" "(" <pa:Parameter> ")" <ba:BlockStatement> => {
        Statement::Try(e, r.unwrap_or(Vec::new()),
            Box::new(Statement::BlockStatement(ok)),
            Some(Box::new((i, pe, Statement::BlockStatement(be)))),
            Box::new((pa, Statement::BlockStatement(ba))))
    },
    "emit" <n:Identifier> "(" <v:CommaOne<Expression>> ")" ";" => {
        Statement::Emit(n, v)
    },
}

Comma<T>: Vec<T> = {
    => Vec::new(),
    CommaOne<T> => <>,
};

CommaOne<T>: Vec<T> = {
    <e:T> <v:("," <T>)*>  => {
        let mut v = v;
        v.insert(0, e);
        v
    }
};

CommaTwo<T>: Vec<T> = {
    <e:T> <v:("," <T>)+>  => {
        let mut v = v;
        v.insert(0, e);
        v
    }
};

extern {
    type Location = usize;
    type Error = LexicalError;

    enum Token<'input> {
        ";" => Token::Semicolon,
        "import" => Token::Import,
        "contract" => Token::Contract,
        "pragma" => Token::Pragma,
        "bool" => Token::Bool,
        "address" => Token::Address,
        "string" => Token::String,
        "bytes" => Token::DynamicBytes,
        Uint => Token::Uint(<u16>),
        Int => Token::Int(<u16>),
        Bytes => Token::Bytes(<u8>),
        "memory" => Token::Memory,
        "calldata" => Token::Calldata,
        "storage" => Token::Storage,
        LexIdentifier => Token::Identifier(<&'input str>),
        LexStringLiteral => Token::StringLiteral(<&'input str>),
        LexHexLiteral => Token::HexLiteral(<&'input str>),
        LexNumber => Token::Number(<&'input str>),
        LexHexNumber => Token::HexNumber(<&'input str>),
        "struct" => Token::Struct,
        "{" => Token::OpenCurlyBrace,
        "}" => Token::CloseCurlyBrace,
        "(" => Token::OpenParenthesis,
        ")" => Token::CloseParenthesis,
        "interface" => Token::Interface,
        "library" => Token::Library,
        "event" => Token::Event,
        "enum" => Token::Enum,
        "public" => Token::Public,
        "private" => Token::Private,
        "external" => Token::External,
        "internal" => Token::Internal,
        "constant" => Token::Constant,
        "=" => Token::Assign,
        "==" => Token::Equal,
        "=>" => Token::Arrow,
        "|=" => Token::BitwiseOrAssign,
        "^=" => Token::BitwiseXorAssign,
        "&=" => Token::BitwiseAndAssign,
        "<<=" => Token::ShiftLeftAssign,
        ">>=" => Token::ShiftRightAssign,
        "+=" => Token::AddAssign,
        "-=" => Token::SubtractAssign,
        "*=" => Token::MulAssign,
        "/=" => Token::DivideAssign,
        "%=" => Token::ModuloAssign,
        "?" => Token::Question,
        ":" => Token::Colon,
        "||" => Token::Or,
        "&&" => Token::And,
        "!=" => Token::NotEqual,
        "<" => Token::Less,
        "<=" => Token::LessEqual,
        ">" => Token::More,
        ">=" => Token::MoreEqual,
        "|" => Token::BitwiseOr,
        "&" => Token::BitwiseAnd,
        "^" => Token::BitwiseXor,
        "<<" => Token::ShiftLeft,
        ">>" => Token::ShiftRight,
        "+" => Token::Add,
        "-" => Token::Subtract,
        "*" => Token::Mul,
        "/" => Token::Divide,
        "%" => Token::Modulo,
        "**" => Token::Power,
        "!" => Token::Not,
        "~" => Token::Complement,
        "delete" => Token::Delete,
        "new" => Token::New,
        "++" => Token::Increment,
        "--" => Token::Decrement,
        "[" => Token::OpenBracket,
        "]" => Token::CloseBracket,
        "." => Token::Member,
        "true" => Token::True,
        "false" => Token::False,
        "pure" => Token::Pure,
        "view" => Token::View,
        "payable" => Token::Payable,
        "constructor" => Token::Constructor,
        "function" => Token::Function,
        "returns" => Token::Returns,
        "return" => Token::Return,
        "if" => Token::If,
        "for" => Token::For,
        "while" => Token::While,
        "else" => Token::Else,
        "_" => Token::Underscore,
        "do" => Token::Do,
        "continue" => Token::Continue,
        "break" => Token::Break,
        "throw" => Token::Throw,
        "emit" => Token::Emit,
        "," => Token::Comma,
        "anonymous" => Token::Anonymous,
        "indexed" => Token::Indexed,
        "mapping" => Token::Mapping,
        "try" => Token::Try,
        "catch" => Token::Catch,
        "receive" => Token::Receive,
        "fallback" => Token::Fallback,
        DocComment => Token::DocComment(<CommentType>, <&'input str>)
    }
}
