on:
  push:
    tags:
    - 'v*'

name: Upload Release Asset

jobs:
  linux:
    name: Build Linux
    runs-on: ubuntu-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v2
    - name: Install LLVM
      run: sudo apt-get -y install llvm-8-dev clang-8 git zlib1g-dev
    - name: Install stable toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
    - name: Compile stdlib
      run: clang-8 --target=wasm32 -c -emit-llvm -O3 -ffreestanding -fno-builtin -Wall stdlib.c sha3.c substrate.c ripemd160.c
      working-directory:  ./stdlib
    - name: Build
      run: cargo build --verbose --release
    - name: Run tests
      run: cargo test --verbose --release
    - name: Upload result
      uses: actions/upload-artifact@v1
      with:
        name: solang
        path: target/release/solang

  windows:
    name: Windows
    runs-on: windows-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v2
    - name: Add LLVM to Path
      run:  echo "::add-path::c:\llvm80\bin"
    - name: Download LLVM
      run: curl -sS -o c:\llvm.zip https://www.mess.org/llvm.zip
    - name: Extract LLVM
      # unzip exists but always exits with code 1
      run: powershell Expand-Archive c:\llvm.zip -DestinationPath c:\
    - name: Compile stdlib
      run: clang --target=wasm32 -c -emit-llvm -O3 -ffreestanding -fno-builtin -Wall stdlib.c sha3.c substrate.c ripemd160.c
      working-directory:  ./stdlib
    - name: Build
      run: cargo build --release --verbose
    - name: Run tests
      run: cargo test --release --verbose
    - name: Upload result
      uses: actions/upload-artifact@v1
      with:
        name: solang.exe
        path: target/release/solang.exe

  release:
    name: Upload Release Asset
    needs: [linux, windows]
    runs-on: ubuntu-latest
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: true
    - name: Download linux release
      uses: actions/download-artifact@v1
      with:
        name: solang
    - name: Upload linux release
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: solang
        asset_name: solang_linux_${{ github.ref }}
        asset_content_type: application/octet-stream
    - name: Download Windows release
      uses: actions/download-artifact@v1
      with:
        name: solang.exe
    - name: Upload windows release
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: solang.exe
        asset_name: solang_windows_${{ github.ref }}.exe
        asset_content_type: application/octet-stream
